---
title: "Viktors broken Code"
author: "Kiet Bastiaans"
date: "24-3-2022"
output: html_document
---
---
title: "Assigment - Naive Bayes DIY-Sabotage"
author:
  - name author here - Viktor Atanasov
  - name reviewer here - Kiet Bastiaans
  date: 24/03/2022
---

Setup
```{r}
library(tidyverse)
library(caret)
library(tm)
library(stopwords)
library(SnowballC)
library(e1071)
```


Data: 
```{r}
url <- "https://raw.githubusercontent.com/HAN-M3DM-Data-Mining/data-mining-s2y2122-vicsubzero/master/datasets/NB-fakenews.csv"
rawDA <- read_csv(url)
```
## Business Understanding

Build a system to identify unreliable news articles.

## Data Understanding

Here we have a dataset that includes diffrent titles from a news article. They are categorised as "0" reliable and "1" unreliable. THe goal of the model will beto correctly predict if the article is reliable or not.  

## Data Cleaning & Preparation 


```{r}
# We need to start with cleaning the data and removing some of the unnecessary collums 
rawDA <- rawDA[-1]
rawDA <- rawDA[-1]
rawDA <- rawDA[-1]
```


```{r}
#the Code is too big for R (and or my Pc )so gonna lower the dataset a bit

rawDA <- rawDA[-c(1:15000),] 



```

```{r}
# Change the name of the labels so it is more clear
rawDA <- mutate(rawDA, label =recode(label,"1"= "Fake","0"="Real"))
```

```{r}
#Creating the factor 
rawDA$label <- rawDA$label %>% factor  %>%  relevel("Real")
class(rawDA$label)
```
```{r}
# Creating a  corpus, which refers to a collection of text documents
rawCorpus <- Corpus(VectorSource(rawDA$text))
inspect(rawCorpus[1:3])
```
```{r}
# Here we are doing more cleaning like removing numbers, upercases end etc. 
cleanCorpus <- rawCorpus %>% tm_map(tolower) %>% tm_map(removeNumbers)
```
```{r}
# now we will remove common transitional wording like "and, but and etc" 
cleanCorpus <- cleanCorpus %>% tm_map(removeWords, stopwords("en", source = "nltk")) %>% tm_map(removePunctuation)
```

```{r}
#Now a lot of items are removed there are spaces. Now I will remove them 
cleanCorpus <- cleanCorpus %>% tm_map(stripWhitespace)
#Also i will take care of the text stemming which reduces words to their root form. In other words, this process removes suffixes from words to make it simple and to get the common origin. For example, a stemming process reduces the words “moving”, “moved” and “movement” to the root word, “move”.
cleanCorpus <- cleanCorpus %>% tm_map(stemDocument)
#comparing the clean and the raw corpuses 
tibble(Raw = rawCorpus$content[1:3], Clean = cleanCorpus$content[1:3])
```

```{r}
# Now i will try my computer computing cpabilities. Creating a matrix containing all the words 
cleanDTM <- cleanCorpus %>% DocumentTermMatrix
inspect(cleanDTM)
```

```{r}
#Just before I start the modeling i need to separate the datasets in training and test sets. Using the 75/25% split  
trainIndex <- createDataPartition(rawDA$label, p = .75, 
                                  list = FALSE, 
                                  times = 1)
head(trainIndex)
```

```{r}
# Apply split indices to DF
trainDF <- rawDA[trainIndex, ]
testDF <- rawDA[-trainIndex, ]
# Apply split indices to Corpus
trainCorpus <- cleanCorpus[trainIndex]
testCorpus <- cleanCorpus[-trainIndex]
# Apply split indices to DTM
trainDTM <- cleanDTM[trainIndex, ]
testDTM <- cleanDTM[-trainIndex, ]
```

```{r}
# to save on computation time we will eliminate words with low frequencies. Mainly becouse very few counts  will have limited predictive capability
freqWords <- trainDTM %>% findFreqTerms(5)
trainDTM <-  DocumentTermMatrix(trainCorpus, list(dictionary = freqWords))
testDTM <-  DocumentTermMatrix(testCorpus, list(dictionary = freqWords))
```

```{r}
#Building a function that will indicate whether the word appears in the document or not. 
convert_counts <- function(x) {
  x <- ifelse(x > 0, 1, 0) %>% factor(levels = c(0,1), labels = c("No", "Yes"))
}
```


```{r}
nColsDTM <- dim(trainDTM)[2]
```


```{r}
trainDTM <- apply(trainDTM, MARGIN = 2, convert_counts)
```


```{r}
testDTM <- apply(testDTM, MARGIN = 2, convert_counts)
```


```{r}
head(trainDTM[,1:10])
```

## Modeling & Deplpyment 
```{r}
#should be label not article
nbayesModel <- naiveBayes(trainDTM, trainDF$label, laplace = 1)
```

```{r} 
#agian it should be label 
predVec <- predict(nbayesModel, testDTM) 
confusionMatrix(predVec, testDF$label, positive = "Real", dnn = c("Prediction", "True"))
```

